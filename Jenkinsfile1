pipeline {
    agent any
        environment {
        KUBECONFIG = credentials('kubeconfig')
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'rm -rf jenkins-project'
                sh 'git clone https://github.com/kodekloudhub/jenkins-project.git'
                sh "ls -ltr"
            }
        }
        stage('Approve Default Image') {
            steps {
                script {
                    env.PARAMETER_VALUE = 'sanjeevkt720/jenkins-flask-app:v5'
                    echo 'Using default Docker image: ${env.PARAMETER_VALUE}'
                }
            }
        }
        stage('Deploy to EKS Prod env'){
            steps{
                script{
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', credentialsId: 'aws')]){
                        def deploymentExists = sh(script: "kubectl get deployment flask-app-deployment-prod -n prod  -o json", returnStatus: true)
                        if (deploymentExists == 0){
                                    sh "kubectl set image -n prod deployment/flask-app-deployment-prod flask-app=${env.PARAMETER_VALUE} --record"
                                    echo "Kubernetes deployment updated successfully"
                                }
                        else 
                                {
                                    sh "kubectl apply -f jenkins-project/deployment_production.yaml"
                                    echo "Kubernetes deployment created successfully"
                                }
                    }
                }
            }
        }
    }
}